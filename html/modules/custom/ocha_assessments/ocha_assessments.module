<?php

/**
 * @file
 * OCHA Assessments.
 */

use Drupal\node\Entity\Node;
use Drupal\Core\File\FileSystemInterface;
use Drupal\ocha_persons\Entity\PersonEntity;

/**
 * Implements hook_field_widget_info_alter().
 */
function ocha_assessments_field_widget_info_alter(array &$info) {
  $info['select2']['field_types'][] = 'ocha_countries';
  $info['select2']['field_types'][] = 'ocha_disasters';
  $info['select2']['field_types'][] = 'ocha_local_groups';
  $info['select2']['field_types'][] = 'ocha_organizations';
  $info['select2']['field_types'][] = 'ocha_themes';
  $info['select2']['field_types'][] = 'ocha_population_type';
  $info['select2']['field_types'][] = 'ocha_global_coordination_groups';

  $info['custom_widgets_text_autocomplete']['field_types'][] = 'ocha_countries';
  $info['custom_widgets_text_autocomplete']['field_types'][] = 'ocha_disasters';
  $info['custom_widgets_text_autocomplete']['field_types'][] = 'ocha_local_groups';
  $info['custom_widgets_text_autocomplete']['field_types'][] = 'ocha_organizations';
  $info['custom_widgets_text_autocomplete']['field_types'][] = 'ocha_themes';
  $info['custom_widgets_text_autocomplete']['field_types'][] = 'ocha_population_type';
  $info['custom_widgets_text_autocomplete']['field_types'][] = 'ocha_global_coordination_groups';
}

/**
 * Get a variable.
 */
function ocha_assessments_variable_get($key, $default) {
  if (Drupal::state()->get($key)) {
    return Drupal::state()->get($key);
  }

  return $default;
}

/**
 * Set a variable.
 */
function ocha_assessments_variable_set($key, $value) {
  Drupal::state()->set($key, $value);
}

/**
 * Wrapper around log function.
 */
function ocha_assessments_log($message) {
  if (function_exists('drush_log')) {
    drush_log($message);
  }
  else {
    \Drupal::logger('ocha_assessments')->notice($message);
  }
}

/**
 * Migrate assessments.
 */
function ocha_assessments_from_hrinfo() {
  if (ocha_assessments_variable_get('ocha_assessments_stop_processing_hrinfo', FALSE)) {
    ocha_assessments_log('Kill switch is enabled!');
    return;
  }

  ocha_assessments_log('Getting page ' . ocha_assessments_variable_get('ocha_assessments_page_hrinfo', 1));

  $page = ocha_assessments_variable_get('ocha_assessments_page_hrinfo', 1);
  $api_url = ocha_assessments_variable_get('ocha_assessments_api_url_hrinfo', 'https://www.humanitarianresponse.info/api/v1.0/assessments');

  // Build URL.
  $ts = ocha_assessments_variable_get('ocha_assessments_most_recent_hrinfo', 1);

  $url = $api_url;
  $url .= '?page[number]=' . $page;
  $url .= '&filter[changed][value]=' . $ts . '&filter[changed][operator]=>';
  $url .= '&sort=changed,id';
  ocha_assessments_log('URL: ' . $url);

  // Get data.
  $response = \Drupal::httpClient()->get($url);
  if ($response->getStatusCode() === 200) {
    $raw = $response->getBody()->getContents();
    $data = json_decode($raw);

    if (isset($data->data) && count($data->data)) {
      foreach ($data->data as $row) {
        ocha_assessments_process_row_from_hrinfo($row);
      }

      // Increment page.
      ocha_assessments_variable_set('ocha_assessments_page_hrinfo', $page + 1);

      return;
    }
  }

  ocha_assessments_variable_set('ocha_assessments_stop_processing_hrinfo', TRUE);
  ocha_assessments_variable_set('ocha_assessments_most_recent_hrinfo', REQUEST_TIME);
};

/**
 * Process assessment data.
 *
 * @SuppressWarnings(PHPMD)
 */
function ocha_assessments_process_row_from_hrinfo($item) {
  ocha_assessments_log('Migrating ' . $item->url);

  if (isset($item->label) && $item->label && isset($item->id) && $item->id) {
    // Skip existing nodes.
    if ($node = \Drupal::entityTypeManager()->getStorage('node')->load($item->id)) {
      // TODO: Handle this.
      return;
    }

    $label = trim($item->label);

    // Create node object.
    $data = [
      'type' => 'assessment',
      'title' => $label,
      'nid' => $item->id,
      'field_contacts' => [],
      'field_local_groups' => [],
      'field_organizations' => [],
      'field_asst_organizations' => [],
      'field_locations' => [],
      'field_population_types' => [],
      'field_themes' => [],
      'field_units_of_measurement' => [],
      'field_disasters' => [],
      'field_assessment_data' => [],
      'field_assessment_report' => [],
      'field_assessment_questionnaire' => [],
    ];

    // Contacts.
    if (isset($item->contacts) && count($item->contacts)) {
      // Uses the same Ids.
      foreach ($item->contacts as $hid_id) {
        // Lookup existing contacts.
        $person_id = ocha_assessments_lookup_person($hid_id);
        if (!$person_id) {
          // Or create new contact.
          $person_id = ocha_assessments_create_person($hid_id);
        }
        $data['field_contacts'][] = [
          'target_id' => $person_id,
        ];
      }
    }

    // Local group aka Cluster(s)/Sector(s).
    if (isset($item->bundles) && count($item->bundles)) {
      // Uses the same Ids.
      foreach ($item->bundles as $row) {
        if (isset($row->id)) {
          $data['field_local_groups'][] = [
            'value' => $row->id,
          ];
        }
      }
    }

    // Leading/Coordinating Organization(s).
    if (isset($item->organizations) && count($item->organizations)) {
      // Uses the same Ids.
      foreach ($item->organizations as $row) {
        $data['field_organizations'][] = [
          'value' => $row->id,
        ];
      }
    }

    // Participating Organization(s).
    if (isset($item->participating_organizations) && count($item->participating_organizations)) {
      // Uses the same Ids.
      foreach ($item->participating_organizations as $row) {
        if ($row && isset($row->id)) {
          $data['field_asst_organizations'][] = [
            'value' => $row->id,
          ];
        }
      }
    }

    // Location(s).
    if (isset($item->locations) && count($item->locations)) {
      // Uses the same Ids.
      foreach ($item->locations as $row) {
        $data['field_locations'][] = [
          'value' => $row->id,
        ];
      }
    }

    // Population Type(s).
    if (isset($item->population_types) && count($item->population_types)) {
      // Uses the same Ids.
      foreach ($item->population_types as $row) {
        $data['field_population_types'][] = [
          'value' => $row->id,
        ];
      }
    }

    // Theme(s).
    if (isset($item->themes) && count($item->themes)) {
      // Uses different Ids.
      foreach ($item->themes as $row) {
        $theme = ocha_themes_get_item_by_name($row->label);
        if ($theme) {
          $data['field_themes'][] = [
            'value' => $theme->id,
          ];
        }
      }
    }

    // Unit(s) of Measurement.
    if (isset($item->unit_measurement) && $item->unit_measurement) {
      foreach ($item->unit_measurement as $row) {
        $data['field_units_of_measurement'][] = [
          'value' => $row,
        ];
      }
    }

    // Collection Method(s).
    if (isset($item->collection_method) && $item->collection_method) {
      foreach ($item->collection_method as $row) {
        $data['field_collection_methods'][] = [
          'value' => $row,
        ];
      }
    }

    // Disasters.
    if (isset($item->disasters) && $item->disasters) {
      foreach ($item->disasters as $row) {
        if ($disaster = ocha_disasters_get_item_by_glide($row->glide)) {
          $data['field_disasters'][] = [
            'value' => $disaster->id,
          ];
        }
      }
    }

    // Operation/Country.
    if (isset($item->operation) && $item->operation) {
      foreach ($item->operation as $row) {
        if ($row && isset($row->label) && $country = ocha_countries_get_item_by_label($row->label)) {
          $data['field_countries'][] = [
            'value' => $country->id,
          ];
        }
      }
    }

    // Other location.
    if (isset($item->other_location) && $item->other_location) {
      $data['field_other_location'] = $item->other_location;
    }

    // Subject/Objective.
    if (isset($item->subject) && $item->subject) {
      $data['field_subject_objective'][] = [
        'value' => $item->subject,
      ];
    }

    // Methodology.
    if (isset($item->methodology) && $item->methodology) {
      $data['field_methodology'][] = [
        'value' => $item->methodology,
      ];
    }

    // Key findings.
    if (isset($item->key_findings) && $item->key_findings) {
      $data['field_key_findings'][] = [
        'value' => $item->key_findings,
      ];
    }

    // Sample size.
    if (isset($item->sample_size) && $item->sample_size) {
      $data['field_sample_size'] = $item->sample_size;
    }

    // Frequency.
    if (isset($item->frequency) && $item->frequency) {
      $data['field_frequency'] = $item->frequency;
    }

    // Status.
    if (isset($item->status) && $item->status) {
      $data['field_status'] = $item->status;
    }

    // Assessment Date(s).
    if (isset($item->date) && $item->date) {
      $data['field_ass_date'][] = [
        'value' => substr($item->date->value, 0, 10),
        'end_value' => substr($item->date->value2, 0, 10),
      ];
    }

    // Create date.
    $created = REQUEST_TIME;
    if (isset($item->created) && $item->created) {
      $data['created'] = $item->created;
      $created = $item->created;
    }

    // Changed date.
    if (isset($item->changed) && $item->changed) {
      $data['changed_override'] = $item->changed;
    }

    if (isset($item->data) && $item->data) {
      $document = $item->data;
      $data['field_assessment_data'][] = ocha_assessments_parse_document($document, $created);
    }

    if (isset($item->report) && $item->report) {
      $document = $item->report;
      $data['field_assessment_report'][] = ocha_assessments_parse_document($document, $created);
    }

    if (isset($item->questionnaire) && $item->questionnaire) {
      $document = $item->questionnaire;
      $data['field_assessment_questionnaire'][] = ocha_assessments_parse_document($document, $created);
    }

    $node = Node::create($data);
    $node->save();
  }
}

/**
 * Add a document.
 */
function ocha_assessments_parse_document($document, $created) {
  $data = [
    'accessibility' => isset($document->accessibility) ? $document->accessibility : 'Publicly Available',
    'uri' => '',
    'title' => '',
    'instructions' => '',
    'target_id' => 0,
    'display' => 1,
    'description' => '',
  ];

  if (isset($document->file)) {
    $trans = \Drupal::transliteration();

    $filename = $trans->transliterate($document->file->filename, 'en');
    $filename_save = preg_replace('/\-+/', '-', strtolower(preg_replace('/[^a-zA-Z0-9_\-\.]+/', '', str_replace(' ', '-', $filename))));

    $url = $document->file->url;

    // Copy file.
    $file_content = file_get_contents($url);
    if ($file_content) {
      $directory = 'public://assessments/' . date('Y-m', $created) . '/';
      \Drupal::service('file_system')->prepareDirectory($directory, FileSystemInterface::CREATE_DIRECTORY);
      $file = file_save_data($file_content, $directory . $filename_save, FileSystemInterface::EXISTS_REPLACE);

      $data['target_id'] = $file->id();
      $data['description'] = $filename;
    }
    else {
      ocha_assessments_log('Unable to fetch ' . $url);
    }
  }

  return $data;
}

/**
 * Implements hook_entity_presave().
 */
function ocha_assessments_node_presave($node) {
  if ($node->bundle() == 'assessment') {
    $changed = $node->changed_override;
    if ($changed) {
      $node->set('changed', $changed);
    }
  }
}

/**
 * Add a document.
 */
function ocha_assessments_create_document($accessibility, $document_url, $instructions = '') {
  $data = [
    'accessibility' => isset($accessibility) ? $accessibility : 'Publicly Available',
    'uri' => '',
    'title' => '',
    'instructions' => $instructions,
    'target_id' => 0,
    'display' => 1,
    'description' => '',
  ];

  if (!empty($document_url)) {
    $trans = \Drupal::transliteration();

    $url_parts = explode('/', $document_url);
    $filename = end($url_parts);
    $filename = $trans->transliterate($document_url, 'en');
    $filename_save = preg_replace('/\-+/', '-', strtolower(preg_replace('/[^a-zA-Z0-9_\-\.]+/', '', str_replace(' ', '-', $filename))));

    // Copy file.
    $file_content = file_get_contents($document_url);
    if ($file_content) {
      $directory = 'public://assessments/' . date('Y-m') . '/';
      \Drupal::service('file_system')->prepareDirectory($directory, FileSystemInterface::CREATE_DIRECTORY);
      $file = file_save_data($file_content, $directory . $filename_save, FileSystemInterface::EXISTS_REPLACE);

      $data['target_id'] = $file->id();
      $data['description'] = $filename;
    }
    else {
      ocha_assessments_log('Unable to fetch ' . $document_url);
    }
  }

  return $data;
}

/**
 * Lookup contact using HID Id.
 */
function ocha_assessments_lookup_person($hid_id) {
  $query = \Drupal::service('entity.query')
    ->get('person_entity')
    ->condition('field_hid', $hid_id);
  $entity_ids = $query->execute();

  if (empty($entity_ids)) {
    return FALSE;
  }

  return reset($entity_ids);
}

/**
 * Create contact using HID Id.
 */
function ocha_assessments_create_person($hid_id) {
  $data = [
    'name' => $hid_id,
    'field_hid' => $hid_id,
  ];

  // Check HID.
  if ($contact = ocha_hid_contacts_load_by_id($hid_id)) {
    $data['name'] = $contact->name;
    $data['field_email'] = [];
    $data['field_phone'] = [];

    if (!empty($contact->phone_number)) {
      $data['field_phone'][] = $contact->phone_number;
    }

    if (!empty($contact->email)) {
      $data['field_email'][] = $contact->email;
    }
  }

  $person = PersonEntity::create($data);
  $person->save();

  return $person->id();
}
