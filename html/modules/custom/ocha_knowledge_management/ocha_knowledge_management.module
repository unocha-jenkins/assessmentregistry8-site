<?php

/**
 * @file
 * OCHA Knowledge management.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\File\FileSystemInterface;
use Drupal\media\Entity\Media;
use Drupal\node\Entity\Node;
use Drupal\pathauto\PathautoState;
use Drupal\taxonomy\Entity\Term;

/**
 * Wrapper around log function.
 */
function ocha_knowledge_management_log($message) {
  if (function_exists('drush_log')) {
    drush_log($message);
  }
  else {
    \Drupal::logger('ocha_knowledge_management')->notice($message);
  }
}

/**
 * Migrate assessments.
 */
function ocha_knowledge_management_from_csv() {
  $src = drupal_get_path('module', 'ocha_knowledge_management') . '/reg_km.csv';

  if (($handle = fopen($src, "r")) !== FALSE) {
    // Skip header.
    fgetcsv($handle, 1000, ",");

    while (($data = fgetcsv($handle, 1000, ",")) !== FALSE) {
      ocha_knowledge_management_process_row_from_hrinfo($data);
    }
  }
};

/**
 * Process assessment data.
 *
 * @SuppressWarnings(PHPMD)
 */
function ocha_knowledge_management_process_row_from_hrinfo($data) {
  $item = (object) [
    'title' => $data[0],
    'context' => $data[1],
    'country' => $data[2],
    'document' => $data[3],
    'document_type' => $data[4],
    'global_cluster' => $data[5],
    'hpc_document_repository' => $data[6],
    'life_cycle_steps' => $data[7],
    'media' => $data[8],
    'original_publication_date' => $data[9],
    'population_types' => $data[10],
    'post_date' => $data[11],
    'published' => $data[12],
    'updated_date' => $data[13],
    'description' => $data[14],
    'path' => $data[15],
    'nid' => $data[16],
  ];

  ocha_knowledge_management_log('Migrating ' . $item->title);

  if (isset($item->title) && $item->title) {
    $title = trim($item->title);

    // Skip existing nodes.
    if ($node = \Drupal::entityTypeManager()->getStorage('node')->load($item->nid)) {
      ocha_knowledge_management_log('Deleting ' . $item->nid . ' -- ' . $title);
      $node->delete();
    }

    // Create node object.
    $data = [
      'type' => 'knowledge_management',
      'title' => $title,
      'nid' => $item->nid,
    ];

    // Context.
    if (isset($item->context) && !empty($item->context)) {
      // Split on ','.
      $terms = explode(',', $item->context);
      foreach ($terms as $term) {
        $term = trim($term);
        $data['field_km_context'][] = [
          'target_id' => ocha_knowledge_management_get_tid($term, 'context'),
        ];
      }
    }

    // Country.
    if (isset($item->country) && !empty($item->country)) {
      $term = trim($item->country);
      if ($country = ocha_countries_get_item_by_label($term)) {
        $data['field_countries'][] = [
          'value' => $country->id,
        ];
      }
    }

    // Population Type(s).
    if (isset($item->population_types) && !empty($item->population_types)) {
      $term = trim($item->population_types);
      if ($population_type = ocha_population_type_get_item_by_label($term)) {
        $data['field_population_types'][] = [
          'value' => $population_type->id,
        ];
      }
    }

    // Document type.
    if (isset($item->document_type) && !empty($item->document_type)) {
      // Split on ','.
      $terms = explode(',', $item->document_type);
      foreach ($terms as $term) {
        $term = trim($term);
        $data['field_km_document_type'][] = [
          'target_id' => ocha_knowledge_management_get_tid($term, 'km_document_type'),
        ];
      }
    }

    // HPC Document Repository.
    if (isset($item->hpc_document_repository) && !empty($item->hpc_document_repository)) {
      // Split on ','.
      $terms = explode(',', $item->hpc_document_repository);
      foreach ($terms as $term) {
        $term = trim($term);
        $data['field_km_hpc_document_repository'][] = [
          'target_id' => ocha_knowledge_management_get_tid($term, 'hpc_document_repository'),
        ];
      }
    }

    // Life cycle steps.
    if (isset($item->life_cycle_steps) && !empty($item->life_cycle_steps)) {
      // Split on ','.
      $terms = explode(',', $item->life_cycle_steps);
      foreach ($terms as $term) {
        $term = trim($term);
        $data['field_km_life_cycle_steps'][] = [
          'target_id' => ocha_knowledge_management_get_tid($term, 'life_cycle_steps'),
        ];
      }
    }

    // Original publication date.
    if (isset($item->original_publication_date) && $item->original_publication_date) {
      $data['field_km_original_publication_date'][] = [
        'value' => substr($item->original_publication_date, 0, 10),
      ];
    }

    // Post date.
    $created = REQUEST_TIME;
    if (isset($item->post_date) && $item->post_date) {
      $created = $item->post_date;
      $data['created'] = strtotime($created);
    }

    // Updated date.
    if (isset($item->updated_date) && $item->updated_date) {
      $data['changed_override'] = strtotime($item->updated_date);
    }

    // Published.
    if (isset($item->published) && $item->published) {
      if ($item->published !== 'Yes') {
        $data['status'] = 0;
      }
    }

    // Description.
    if (isset($item->description) && $item->description) {
      $data['field_description'][] = [
        'value' => $item->description,
        'format' => 'full_html',
      ];
    }

    // Path.
    if (isset($item->path) && $item->path) {
      $data['path'] = [
        'alias' => $item->path,
        'pathauto' => PathautoState::SKIP,
      ];
    }

    // Media (not present).
    if (FALSE && isset($item->media) && $item->media) {
      // Split on ','.
      $files = explode(',', $item->media);
      foreach ($files as $url) {
        $url = trim($url);
        $media_item = ocha_knowledge_management_add_media_entity($url, 'document', $created);
        if ($media_item) {
          $data['field_km_media'][] = [
            'target_id' => $media_item->id(),
          ];
        }
      }
    }

    // Document.
    if (isset($item->document) && $item->document) {
      // Split on ','.
      $files = explode(',', $item->document);
      foreach ($files as $url) {
        $url = trim($url);
        $media_item = ocha_knowledge_management_add_media_entity($url, 'document', $created);
        if ($media_item) {
          $data['field_km_document'][] = [
            'target_id' => $media_item->id(),
          ];
        }
      }
    }

    $node = Node::create($data);
    $node->save();
  }
}

/**
 * Implements hook_entity_presave().
 */
function ocha_knowledge_management_node_presave($node) {
  if ($node->bundle() == 'knowledge_management') {
    $changed = $node->changed_override;
    if ($changed) {
      $node->set('changed', $changed);
    }
  }
}

/**
 * Get term id or create a new one.
 */
function ocha_knowledge_management_get_tid($label, $vocabulary) {
  if ($terms = taxonomy_term_load_multiple_by_name($label, $vocabulary)) {
    $term = reset($terms);
  }
  else {
    $term = Term::create([
      'name' => $label,
      'vid' => $vocabulary,
      'parent' => [],
    ]);
    $term->save();
  }

  return $term->id();
}

/**
 * Add a media item.
 */
function ocha_knowledge_management_add_media_entity($url, $bundle, $created) {
  // Get filename from URL.
  $filename = basename($url);

  // Clean filename.
  $trans = \Drupal::transliteration();

  $filename = $trans->transliterate($filename, 'en');
  $filename_save = preg_replace('/\-+/', '-', strtolower(preg_replace('/[^a-zA-Z0-9_\-\.]+/', '', str_replace(' ', '-', $filename))));

  // Copy file.
  $file_content = file_get_contents($url);
  if ($file_content) {
    $directory = 'public://knowledge_management/' . date('Y-m', strtotime($created)) . '/';
    \Drupal::service('file_system')->prepareDirectory($directory, FileSystemInterface::CREATE_DIRECTORY);
    $file = file_save_data($file_content, $directory . $filename_save, FileSystemInterface::EXISTS_REPLACE);

    $media_entity = Media::create([
      'bundle' => $bundle,
      'uid' => '1',
      'name' => $filename,
      'status' => TRUE,
      'field_media_' . $bundle => [
        'target_id' => $file->id(),
        'alt' => $filename,
      ],
    ]);
    $media_entity->save();
    return $media_entity;
  }
  else {
    ocha_assessments_log('Unable to fetch ' . $url);
  }

  return FALSE;
}

/**
 * Implements hook_taxonomy_term_presave().
 */
function ocha_knowledge_management_taxonomy_term_presave(EntityInterface $term) {
  if ($term->bundle() === 'life_cycle_steps') {
    // Update long name based on direct child if needed.
    if ($term->parent->target_id == 0) {
      $term->field_display_label = $term->label();
    }
    else {
      if (isset($term->parent->entity->get('field_display_label')->value)) {
        $term->field_display_label = $term->parent->entity->get('field_display_label')->value . ' > ' . $term->label();
      }
      else {
        $term->field_display_label = '... > ' . $term->label();
      }
    }
  }
}
